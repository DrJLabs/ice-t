[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ice-t"
version = "0.1.0"
description = "Autonomous high-performance template for web-app projects driven by Cursor & Codex"
authors = [{name = "DrJLabs", email = "drj@example.com"}]
requires-python = ">=3.9"
dependencies = [
    "pytest==8.3.4",
    "rich==13.9.4",
    "pydantic==2.10.3",
    "ruff==0.8.4",
    "mypy==1.13.0",
]

[tool.ruff]
# Abundance mindset: fast, comprehensive, opinionated
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "RUF", # ruff-specific rules
]
ignore = [
    "S101",   # assert statements (okay in tests)
    "S603",   # subprocess calls (needed for tooling)
    "PLR0913", # too many arguments (sometimes necessary)
    "TRY003",  # avoid long exception messages (sometimes needed)
    "T201",   # print statements (okay in scripts)
    "PTH123", # open() usage (okay in some contexts)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # assert statements
    "ARG001",  # unused function arguments
    "PLR2004", # magic values
]
"scripts/**/*.py" = [
    "T201",    # print statements (needed for scripts)
    "PTH123",  # open() usage (acceptable in scripts)
    "S607",    # subprocess with partial path (acceptable in scripts)
    "PLR2004", # magic values (acceptable in scripts)
]
"tools/**/*.py" = [
    "T201",    # print statements (needed for tools)
    "PTH123",  # open() usage (acceptable in tools)
]
"src/codex_t/features/pr_management/**/*.py" = [
    "PLR2004", # magic values (acceptable in AI/ML thresholds)
    "E501",    # line too long (complex AI prompts and messages)
    "TRY300",  # try-consider-else (acceptable in AI error handling)
    "TRY401",  # verbose-log-message (needed for debugging AI systems)
    "ARG002",  # unused method arguments (AI interface compatibility)
    "RUF006",  # asyncio-dangling-task (background AI tasks)
    "SIM102",  # collapsible-if (readability in complex AI logic)
    "PLW2901", # redefined-loop-name (acceptable in AI processing loops)
]

[tool.ruff.lint.isort]
known-first-party = ["ice_t"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.mypy]
# Abundance mindset: strict typing for AI optimization
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
exclude = [
    "src/codex_t/features/pr_management/.*",
]

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = ["codex_t.features.pr_management.*"]
ignore_errors = true

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
fail_under = 94
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@pytest.mark.skip",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
markers = [
    "unit: marks tests as unit tests (fast)",
    "integration: marks tests as integration tests (slower)",
    "smoke: marks tests as smoke tests (minimal)",
    "api: marks tests as API tests",
]

[tool.bandit]
skips = ["B101", "B601"]  # Skip assert and shell usage (development tools)
exclude_dirs = ["tests", ".venv", "venv"]

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"ice_t" = ["py.typed"]
