name: ü§ñ Auto-Merge Pull Requests

on:
  pull_request:
    types: [opened, ready_for_review, synchronize, reopened]
    branches: [main, develop]
  pull_request_review:
    types: [submitted, dismissed]
  check_suite:
    types: [completed]

env:
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1

# Ensure only one auto-merge workflow runs at a time per PR
concurrency:
  group: auto-merge-${{ github.event.pull_request.number || github.event.check_suite.pull_requests[0].number }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: read

jobs:
  # Determine if auto-merge should be enabled
  evaluate-auto-merge:
    name: üîç Evaluate Auto-Merge Eligibility
    runs-on: [self-hosted, linux]
    if: |
      github.event.pull_request.draft == false &&
      github.event.pull_request.state == 'open' &&
      !github.event.pull_request.locked
    outputs:
      should-auto-merge: ${{ steps.evaluate.outputs.should-auto-merge }}
      pr-number: ${{ steps.evaluate.outputs.pr-number }}
      pr-node-id: ${{ steps.evaluate.outputs.pr-node-id }}
      merge-method: ${{ steps.evaluate.outputs.merge-method }}
      reason: ${{ steps.evaluate.outputs.reason }}
    steps:
      - name: ‚ö° Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: üîç Evaluate PR for auto-merge
        id: evaluate
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get PR details
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PR_NODE_ID="${{ github.event.pull_request.node_id }}"
          else
            # For check_suite or status events, get PR from API
            PR_DATA=$(gh api repos/${{ github.repository }}/pulls \
              --jq '.[] | select(.head.sha == "${{ github.event.check_suite.head_sha || github.sha }}") | {number, node_id}' | head -1)
            PR_NUMBER=$(echo "$PR_DATA" | jq -r '.number // empty')
            PR_NODE_ID=$(echo "$PR_DATA" | jq -r '.node_id // empty')
          fi

          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "reason=No PR found for this event" >> $GITHUB_OUTPUT
            echo "should-auto-merge=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr-node-id=$PR_NODE_ID" >> $GITHUB_OUTPUT

          # Get detailed PR information
          PR_DETAILS=$(gh pr view $PR_NUMBER --json author,baseRefName,headRefName,title,labels,mergeable,mergeStateStatus,reviewDecision)

          AUTHOR=$(echo "$PR_DETAILS" | jq -r '.author.login')
          BASE_BRANCH=$(echo "$PR_DETAILS" | jq -r '.baseRefName')
          HEAD_BRANCH=$(echo "$PR_DETAILS" | jq -r '.headRefName')
          TITLE=$(echo "$PR_DETAILS" | jq -r '.title')
          MERGEABLE=$(echo "$PR_DETAILS" | jq -r '.mergeable')
          MERGE_STATE=$(echo "$PR_DETAILS" | jq -r '.mergeStateStatus')
          REVIEW_DECISION=$(echo "$PR_DETAILS" | jq -r '.reviewDecision // "NONE"')

          echo "üìã PR Analysis:"
          echo "  - Number: $PR_NUMBER"
          echo "  - Author: $AUTHOR"
          echo "  - Branch: $HEAD_BRANCH ‚Üí $BASE_BRANCH"
          echo "  - Title: $TITLE"
          echo "  - Mergeable: $MERGEABLE"
          echo "  - Merge State: $MERGE_STATE"
          echo "  - Review Decision: $REVIEW_DECISION"

          # Check auto-merge criteria
          SHOULD_AUTO_MERGE="false"
          REASON=""

          # 1. Check if PR is targeting allowed branches
          if [[ "$BASE_BRANCH" != "main" && "$BASE_BRANCH" != "develop" ]]; then
            REASON="Auto-merge only enabled for main/develop branches (targeting: $BASE_BRANCH)"
          # 2. Check if PR is from dependabot, AI agents, or has auto-merge label
          elif [[ "$AUTHOR" == "dependabot[bot]" ]] ||
               [[ "$HEAD_BRANCH" == cursor/* ]] ||
               [[ "$HEAD_BRANCH" == codex/* ]] ||
               echo "$PR_DETAILS" | jq -e '.labels[] | select(.name == "auto-merge")' >/dev/null; then

            # 3. Check if PR is mergeable
            if [[ "$MERGEABLE" != "MERGEABLE" ]]; then
              REASON="PR is not mergeable (state: $MERGEABLE)"
            # 4. For main branch, require review approval
            elif [[ "$BASE_BRANCH" == "main" && "$REVIEW_DECISION" != "APPROVED" ]]; then
              REASON="Main branch requires review approval (current: $REVIEW_DECISION)"
            else
              SHOULD_AUTO_MERGE="true"
              REASON="PR meets auto-merge criteria"
            fi
          else
            REASON="PR not eligible: not from dependabot/AI agents and no auto-merge label"
          fi

          echo "should-auto-merge=$SHOULD_AUTO_MERGE" >> $GITHUB_OUTPUT
          echo "reason=$REASON" >> $GITHUB_OUTPUT

          # Determine merge method based on target branch
          if [[ "$BASE_BRANCH" == "main" ]]; then
            echo "merge-method=SQUASH" >> $GITHUB_OUTPUT
          else
            echo "merge-method=MERGE" >> $GITHUB_OUTPUT
          fi

          echo "ü§ñ Auto-merge Decision: $SHOULD_AUTO_MERGE"
          echo "üìù Reason: $REASON"

  # Enable auto-merge using GraphQL API (primary method)
  enable-auto-merge-graphql:
    name: üöÄ Enable Auto-Merge (GraphQL)
    runs-on: [self-hosted, linux]
    needs: evaluate-auto-merge
    if: needs.evaluate-auto-merge.outputs.should-auto-merge == 'true'
    steps:
      - name: ü§ñ Enable auto-merge via GraphQL
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NODE_ID: ${{ needs.evaluate-auto-merge.outputs.pr-node-id }}
          MERGE_METHOD: ${{ needs.evaluate-auto-merge.outputs.merge-method }}
        run: |
          echo "üöÄ Enabling auto-merge for PR #${{ needs.evaluate-auto-merge.outputs.pr-number }}"
          echo "üì¶ Merge method: $MERGE_METHOD"

          # Enable auto-merge using GraphQL API
          RESULT=$(gh api graphql -F prId="$PR_NODE_ID" -F mergeMethod="$MERGE_METHOD" -f query='
            mutation($prId: ID!, $mergeMethod: PullRequestMergeMethod!) {
              enablePullRequestAutoMerge(input: {
                pullRequestId: $prId
                mergeMethod: $mergeMethod
              }) {
                pullRequest {
                  number
                  autoMergeRequest {
                    enabledAt
                    enabledBy {
                      login
                    }
                    mergeMethod
                  }
                }
              }
            }
          ')

          if echo "$RESULT" | jq -e '.data.enablePullRequestAutoMerge.pullRequest.autoMergeRequest' >/dev/null; then
            echo "‚úÖ Auto-merge enabled successfully via GraphQL"
            ENABLED_AT=$(echo "$RESULT" | jq -r '.data.enablePullRequestAutoMerge.pullRequest.autoMergeRequest.enabledAt')
            echo "‚è∞ Enabled at: $ENABLED_AT"

            # Add success comment to PR
            gh pr comment ${{ needs.evaluate-auto-merge.outputs.pr-number }} --body \
              "ü§ñ **Auto-merge enabled** via GraphQL API

              - **Merge method**: $MERGE_METHOD
              - **Enabled at**: $ENABLED_AT
              - **Reason**: ${{ needs.evaluate-auto-merge.outputs.reason }}

              The PR will automatically merge when all required checks pass. ‚úÖ"
          else
            echo "‚ùå Failed to enable auto-merge via GraphQL"
            echo "Response: $RESULT"
            exit 1
          fi

  # Fallback: Enable auto-merge using marketplace action
  enable-auto-merge-action:
    name: üîÑ Enable Auto-Merge (Action Fallback)
    runs-on: [self-hosted, linux]
    needs: [evaluate-auto-merge, enable-auto-merge-graphql]
    if: |
      needs.evaluate-auto-merge.outputs.should-auto-merge == 'true' &&
      failure()
    steps:
      - name: üîÑ Enable auto-merge via marketplace action
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ github.token }}
          pull-request-number: ${{ needs.evaluate-auto-merge.outputs.pr-number }}
          merge-method: ${{ needs.evaluate-auto-merge.outputs.merge-method == 'SQUASH' && 'squash' || 'merge' }}

      - name: üìù Add fallback success comment
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr comment ${{ needs.evaluate-auto-merge.outputs.pr-number }} --body \
            "ü§ñ **Auto-merge enabled** via marketplace action (fallback)

            - **Merge method**: ${{ needs.evaluate-auto-merge.outputs.merge-method }}
            - **Reason**: ${{ needs.evaluate-auto-merge.outputs.reason }}

            The PR will automatically merge when all required checks pass. ‚úÖ"

  # Auto-approve PRs from trusted sources (optional)
  auto-approve:
    name: ‚úÖ Auto-Approve Trusted PRs
    runs-on: [self-hosted, linux]
    needs: evaluate-auto-merge
    if: |
      needs.evaluate-auto-merge.outputs.should-auto-merge == 'true' &&
      (contains(github.event.pull_request.head.ref, 'dependabot/') ||
       contains(github.event.pull_request.head.ref, 'cursor/') ||
       contains(github.event.pull_request.head.ref, 'codex/'))
    continue-on-error: true  # Don't fail the entire workflow if approval fails
    steps:
      - name: ‚úÖ Auto-approve trusted PR
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Check if PR requires review and hasn't been approved yet
          REVIEW_STATUS=$(gh pr view ${{ needs.evaluate-auto-merge.outputs.pr-number }} --json reviewDecision --jq '.reviewDecision // "NONE"')

          if [[ "$REVIEW_STATUS" != "APPROVED" ]]; then
            echo "‚úÖ Attempting to auto-approve trusted PR #${{ needs.evaluate-auto-merge.outputs.pr-number }}"

            # Try to approve the PR, but handle permission errors gracefully
            if gh pr review ${{ needs.evaluate-auto-merge.outputs.pr-number }} --approve --body \
              "ü§ñ **Automated approval** for trusted source

              This PR is from a trusted source and has been automatically approved.
              Auto-merge will proceed once all status checks pass." 2>/dev/null; then
              echo "‚úÖ PR successfully auto-approved"
            else
              echo "‚ö†Ô∏è Could not auto-approve PR (likely permissions issue)"
              echo "üí° To enable auto-approval:"
              echo "   1. Go to Settings > Actions > General"
              echo "   2. Enable: 'Allow GitHub Actions to create and approve pull requests'"
              echo "   3. Auto-merge will still work, but manual approval may be required"

              # Add informational comment instead of approval
              gh pr comment ${{ needs.evaluate-auto-merge.outputs.pr-number }} --body \
                "ü§ñ **Auto-merge enabled** for trusted source

                ‚ö†Ô∏è Could not auto-approve due to permissions, but auto-merge is enabled.

                **To enable auto-approval**: Go to Settings > Actions > General and enable 'Allow GitHub Actions to create and approve pull requests'

                The PR will automatically merge when all required checks pass and approvals are met. ‚úÖ" || true
            fi
          else
            echo "‚úÖ PR already approved, skipping auto-approval"
          fi

  # Monitor and report auto-merge status
  monitor-auto-merge:
    name: üìä Monitor Auto-Merge Status
    runs-on: [self-hosted, linux]
    needs: evaluate-auto-merge
    if: always()
    steps:
      - name: üìä Generate auto-merge summary
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "## ü§ñ Auto-Merge Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.evaluate-auto-merge.outputs.pr-number }}" != "" ]; then
            echo "**PR Number**: #${{ needs.evaluate-auto-merge.outputs.pr-number }}" >> $GITHUB_STEP_SUMMARY
            echo "**Decision**: ${{ needs.evaluate-auto-merge.outputs.should-auto-merge == 'true' && '‚úÖ Auto-merge enabled' || '‚ùå Auto-merge not enabled' }}" >> $GITHUB_STEP_SUMMARY
            echo "**Reason**: ${{ needs.evaluate-auto-merge.outputs.reason }}" >> $GITHUB_STEP_SUMMARY
            echo "**Merge Method**: ${{ needs.evaluate-auto-merge.outputs.merge-method }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Decision**: ‚ùå No eligible PR found" >> $GITHUB_STEP_SUMMARY
            echo "**Reason**: ${{ needs.evaluate-auto-merge.outputs.reason || 'Event not related to PR or PR not found' }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Auto-Merge Criteria" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Target branch: main or develop" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ PR from: dependabot, cursor/*, codex/*, or has 'auto-merge' label" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ PR is mergeable and not draft" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Main branch PRs require review approval" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ All required status checks must pass" >> $GITHUB_STEP_SUMMARY
