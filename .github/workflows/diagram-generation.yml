name: 📊 Auto-Generate Repository Diagrams

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - '.github/workflows/**'
      - 'scripts/**'
      - 'pyproject.toml'
      - 'README.md'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - '.github/workflows/**'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      diagram_type:
        description: 'Type of diagrams to generate'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - architecture
          - workflow
          - dependencies

env:
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1

jobs:
  generate-diagrams:
    name: 📊 Generate Repository Diagrams
    runs-on: [self-hosted, ice-t, diagrams]
    timeout-minutes: 15

    steps:
      - name: ⚡ Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Setup Python Environment
        run: |
          source .venv/bin/activate || {
            echo "Virtual environment not found, creating one..."
            python3 -m venv .venv
            source .venv/bin/activate
            pip install --upgrade pip setuptools wheel
          }
          pip install -e .

      - name: 📦 Install Diagram Dependencies
        run: |
          source .venv/bin/activate
          pip install \
            graphviz \
            matplotlib \
            seaborn \
            networkx \
            pygraphviz \
            plantuml \
            diagrams \
            pydot \
            plotly \
            mermaid-py

      - name: 🎨 Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz graphviz-dev plantuml

      - name: 📊 Generate Architecture Diagrams
        if: ${{ github.event.inputs.diagram_type == 'all' || github.event.inputs.diagram_type == 'architecture' || github.event.inputs.diagram_type == '' }}
        run: |
          source .venv/bin/activate
          python scripts/generate_architecture_diagrams.py

      - name: 🔄 Generate Workflow Diagrams
        if: ${{ github.event.inputs.diagram_type == 'all' || github.event.inputs.diagram_type == 'workflow' || github.event.inputs.diagram_type == '' }}
        run: |
          source .venv/bin/activate
          python scripts/generate_workflow_diagrams.py

      - name: 📈 Generate Dependency Graphs
        if: ${{ github.event.inputs.diagram_type == 'all' || github.event.inputs.diagram_type == 'dependencies' || github.event.inputs.diagram_type == '' }}
        run: |
          source .venv/bin/activate
          python scripts/generate_dependency_graphs.py

      - name: 📚 Update Documentation
        run: |
          source .venv/bin/activate
          python scripts/update_diagram_docs.py

      - name: 🚀 Commit Generated Diagrams
        if: github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add generated diagrams
          git add docs/diagrams/ || true
          git add README.md || true
          git add docs/ || true

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No diagram changes to commit"
          else
            git commit -m "docs: auto-update repository diagrams [skip ci]"
            git push
          fi

      - name: 💬 Comment on PR with Diagrams
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Find generated diagram files
            const diagramsDir = 'docs/diagrams';
            let comment = '## 📊 Generated Diagrams\n\n';

            if (fs.existsSync(diagramsDir)) {
              const files = fs.readdirSync(diagramsDir).filter(f => f.endsWith('.png') || f.endsWith('.svg'));

              for (const file of files) {
                const fileName = path.parse(file).name;
                comment += `### ${fileName.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}\n`;
                comment += `![${fileName}](docs/diagrams/${file})\n\n`;
              }
            } else {
              comment += 'No diagrams generated for this change.\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: 📊 Archive Diagram Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: repository-diagrams
          path: |
            docs/diagrams/
            *.png
            *.svg
          retention-days: 30
