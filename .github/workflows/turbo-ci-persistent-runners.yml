---
name: üöÄ Turbo CI - ice-t Persistent Runners

"on":
  push:  # Runs on push to any branch
    paths-ignore:
      - '.codex/**'
  pull_request:  # Runs on PRs to any branch
    types:
      - opened
      - synchronize
      - reopened
  workflow_dispatch:
    inputs:
      performance_mode:
        description: 'Performance mode'
        required: false
        default: 'turbo'
        type: choice
        options:
          - maximum
          - turbo
          - balanced
      force_clean:
        description: 'Force clean all caches'
        required: false
        default: false
        type: boolean

env:
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1
  CI: true
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1
  PYTEST_XDIST_WORKER_COUNT: 4
  COVERAGE_PARALLEL: true
  # Disable GitHub Actions cache - counterproductive for persistent runners
  ACTIONS_CACHE_DISABLED: true

defaults:
  run:
    shell: bash --noprofile --norc -euo pipefail {0}

concurrency:
  group: persistent-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:

  # Determine if CI jobs can be safely bypassed
  bypass-check:
    name: üö¶ Bypass Check
    runs-on: [self-hosted, linux]
    outputs:
      bypass: ${{ steps.set.outputs.bypass }}
    steps:
      - name: ‚ö° Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìÇ Determine changed files
        id: diff
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1
            BASE_SHA=$(git rev-parse FETCH_HEAD)
          else
            BASE_SHA=${{ github.event.before }}
          fi
          git diff --name-only "$BASE_SHA" ${{ github.sha }} > changed_files.txt
          echo "files<<EOF" >> $GITHUB_OUTPUT
          cat changed_files.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ‚öôÔ∏è Evaluate bypass rules
        id: set
        run: |
          BYPASS=true
          while IFS= read -r file; do
            case "$file" in
              AGENTS.md|agents/*|.cursor/rules*|docs/*|*.md|*.mmd|*.dot ) # Docs and Markdown
                ;;
              *.png|*.svg|*.jpg|*.jpeg ) # Image files
                ;;
              *)
                BYPASS=false
                break
                ;;
            esac
          done < changed_files.txt
          echo "bypass=$BYPASS" >> $GITHUB_OUTPUT

      - name: üìä Bypass summary
        run: |
          echo "## Bypass Check" >> $GITHUB_STEP_SUMMARY
          cat changed_files.txt >> $GITHUB_STEP_SUMMARY
          echo "Bypass: ${{ steps.set.outputs.bypass }}" >> $GITHUB_STEP_SUMMARY

  workflow-validation:
    name: üß™ Workflow Validation
    runs-on: [self-hosted, linux]
    needs: bypass-check
    if: needs.bypass-check.outputs.bypass != 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install yamllint
        shell: bash
        run: |
          set -euo pipefail
          pip install yamllint
      - name: Run yamllint
        shell: bash
        run: |
          set -euo pipefail
          yamllint .github/workflows
      - name: üìã Debug on failure
        if: failure()
        shell: bash
        run: |
          set -euo pipefail
          python scripts/debug_ci.py > debug.log
      - name: üì§ Upload debug logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-workflow-validation-${{ github.run_id }}
          path: debug.log
          retention-days: 7

  persistent-setup:
    name: üöÄ Local Setup (Persistent)
    runs-on: [self-hosted, ice-t, linux, build, setup]
    needs: bypass-check
    if: needs.bypass-check.outputs.bypass != 'true'
    timeout-minutes: 2
    outputs:
      python-version: ${{ steps.python.outputs.version }}
      performance-mode: ${{ steps.performance.outputs.mode }}
      requirements-hash: ${{ steps.requirements.outputs.hash }}
    steps:
      - name: ‚ö° Checkout (reuse local .git)
        uses: actions/checkout@v4
        with:
          fetch-depth: >-
            ${{ github.event_name == 'pull_request' && 2 || 1 }}

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: üßπ Clean environment (if forced)
        if: github.event.inputs.force_clean == 'true'
        run: |
          echo "üßπ Force cleaning requested..."
          rm -rf ~/.cache/ice-t-venv-* ~/.cache/pip ~/.cache/pre-commit || true

      - name: üîí Compile lock files
        run: |
          python -m pip install --quiet pip-tools
          pip-compile requirements.in
          pip-compile dev-requirements.in

      - name: üìä Calculate requirements hash
        id: requirements
        run: |
            # Calculate hash for cache invalidation
            HASH=""
            [ -f "requirements.txt" ] && \
              HASH+=$(sha256sum requirements.txt | cut -d' ' -f1)
            [ -f "dev-requirements.txt" ] && \
              HASH+=$(sha256sum dev-requirements.txt | cut -d' ' -f1)
            HASH+=$(/usr/bin/python3 --version | sha256sum | cut -d' ' -f1)
            FINAL_HASH=$(echo "$HASH" | sha256sum | cut -d' ' -f1)
            echo "hash=$FINAL_HASH" >> $GITHUB_OUTPUT
            echo "üîç Requirements hash: $FINAL_HASH"

      - name: üì¶ Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ steps.requirements.outputs.hash }}
          restore-keys: |
            pip-

      - name: üêç Setup persistent virtual environment
        id: venv
        run: |
          # Global shared virtual environment based on requirements hash
          REQ_HASH="${{ steps.requirements.outputs.hash }}"
          VENV_DIR="$HOME/.cache/ice-t-venv-${REQ_HASH:0:12}"

          echo "üöÄ Persistent venv: ${VENV_DIR}"
          echo "üì¶ Requirements hash: ${REQ_HASH:0:8}"

          # Check if persistent virtual environment exists and is current
          if [ -d "$VENV_DIR" ] && [ -f "$VENV_DIR/pyvenv.cfg" ]; then
            echo "‚ö° Using persistent virtual environment (2-3 second fast path)"
            SETUP_TIME="fast"
          else
            echo "üîß Creating persistent venv (30-40 seconds one-time setup)"
            rm -rf "$VENV_DIR" || true
            /usr/bin/python3 -m venv "$VENV_DIR" --clear

            # Activate and install dependencies with pip cache
            export VIRTUAL_ENV="$VENV_DIR"
            export PATH="$VENV_DIR/bin:$PATH"
            export PIP_CACHE_DIR="$HOME/.cache/pip"
            mkdir -p "$PIP_CACHE_DIR"

            echo "‚¨ÜÔ∏è Installing dependencies..."
            python -m pip install --upgrade pip wheel setuptools \
              --no-input --no-compile --quiet
            [ -f "requirements.txt" ] && \
              python -m pip install --no-input --no-compile \
                -r requirements.txt --quiet
            [ -f "dev-requirements.txt" ] && \
              python -m pip install --no-input --no-compile \
                -r dev-requirements.txt --quiet
            echo "‚úÖ Persistent virtual environment created"
            SETUP_TIME="created"
          fi

          # Activate for current and future steps
          export VIRTUAL_ENV="$VENV_DIR"
          export PATH="$VENV_DIR/bin:$PATH"
          echo "VIRTUAL_ENV=$VENV_DIR" >> $GITHUB_ENV
          echo "PATH=$VENV_DIR/bin:$PATH" >> $GITHUB_ENV
          echo "ICE_T_VENV_HASH=${REQ_HASH:0:12}" >> $GITHUB_ENV

          echo "setup_time=$SETUP_TIME" >> $GITHUB_OUTPUT
          echo "üêç Python: $(python --version)"

      - name: ‚ö° Verify setup
        id: python
        run: |
          echo "version=$(python --version | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "üêç Python: $(python --version)"
          echo "üì¶ Pip: $(pip --version | head -1)"
          echo "üìç Virtual env: $VIRTUAL_ENV"

      - name: üéØ Determine performance mode
        id: performance
        run: |
          MODE="${{ github.event.inputs.performance_mode || 'turbo' }}"
          echo "mode=$MODE" >> $GITHUB_OUTPUT
          echo "üöÄ Performance mode: $MODE"

      - name: üìà Performance summary
        run: |
          SETUP_TIME="${{ steps.venv.outputs.setup_time }}"
          echo "## üöÄ Persistent Runner Performance" >> $GITHUB_STEP_SUMMARY
          echo "- **Virtual Environment**: ${{ env.VIRTUAL_ENV }}" \
            >> $GITHUB_STEP_SUMMARY
          echo "- **Setup Strategy**: ${SETUP_TIME}" >> $GITHUB_STEP_SUMMARY
          echo "- **Requirements Hash**: ${{ env.ICE_T_VENV_HASH }}" \
            >> $GITHUB_STEP_SUMMARY
          if [ "$SETUP_TIME" = "fast" ]; then
            echo "- **Setup Time**: ‚ö° 2-3 seconds (cached)" \
              >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Setup Time**: üîß 30-40 seconds (one-time creation)" \
              >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Next runs**: Will use fast path" >> $GITHUB_STEP_SUMMARY

  persistent-code-quality:
    name: üöÄ Code Quality (Local Cache)
    runs-on: [self-hosted, ice-t, linux, quality, security]
    needs: [bypass-check, persistent-setup]
    if: needs.bypass-check.outputs.bypass != 'true'
    timeout-minutes: 3
    steps:
      - name: ‚ö° Checkout
        uses: actions/checkout@v4

      - name: ‚ö° Activate persistent virtual environment
        uses: ./.github/actions/setup-venv
        with:
          requirements-hash: >-
            ${{ needs.persistent-setup.outputs.requirements-hash }}

      - name: "üßπ Run pre-commit checks"
        shell: bash
        run: |
          set -euo pipefail
          scripts/validate_lockfiles.sh
          echo "Using pre-commit cache: ~/.cache/pre-commit"
          pre-commit run --all-files --show-diff-on-failure \
            | tee precommit.log

      - name: "üì§ Upload pre-commit logs"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: precommit-${{ github.run_id }}
          path: precommit.log
          retention-days: 7

      - name: üîç Code complexity analysis
        run: |
          echo "## Code Complexity Analysis" >> $GITHUB_STEP_SUMMARY
          find src -name "*.py" -exec python -c "
          import ast, sys
          try:
              with open(sys.argv[1]) as f:
                  tree = ast.parse(f.read())
                  complexity = len([
                    node for node in ast.walk(tree)
                    if isinstance(node, (
                      ast.If, ast.For, ast.While,
                      ast.FunctionDef, ast.ClassDef
                    ))
                  ])
                  print(f'{'‚ö†Ô∏è' if complexity > 50 else '‚úÖ'} ' +
                        f'{sys.argv[1]}: {complexity} nodes')
          except Exception as e:
              print(f'‚ùå {sys.argv[1]}: {e}')
          " {} \; >> $GITHUB_STEP_SUMMARY 2>/dev/null || true

      - name: üìã Debug on failure
        if: failure()
        shell: bash
        run: |
          set -euo pipefail
          python scripts/debug_ci.py > debug.log
      - name: üì§ Upload debug logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-code-quality-${{ github.run_id }}
          path: debug.log
          retention-days: 7

  persistent-type-checking:
    name: üöÄ Type Safety (Local Cache)
    runs-on: [self-hosted, ice-t, linux, quality, security]
    needs: [bypass-check, persistent-setup]
    if: needs.bypass-check.outputs.bypass != 'true'
    timeout-minutes: 5
    steps:
      - name: ‚ö° Checkout
        uses: actions/checkout@v4

      - name: ‚ö° Activate persistent virtual environment
        uses: ./.github/actions/setup-venv
        with:
          requirements-hash: >-
            ${{ needs.persistent-setup.outputs.requirements-hash }}

      - name: üîç Run MyPy type checking (using .mypy_cache)
        run: |
          echo "## Type Checking Results" >> $GITHUB_STEP_SUMMARY
          if [ -d src/ice_t ]; then
              # MyPy automatically uses .mypy_cache
              mypy --explicit-package-bases --namespace-packages \
                --strict-optional --show-error-codes src/ice_t
          else
              echo "No src/ice_t directory found, skipping type checking" \
                >> $GITHUB_STEP_SUMMARY
          fi

  persistent-security:
    name: üöÄ Security (Local Cache)
    runs-on: [self-hosted, ice-t, linux, quality, security]
    needs: [bypass-check, persistent-setup]
    if: needs.bypass-check.outputs.bypass != 'true'
    timeout-minutes: 3
    steps:
      - name: ‚ö° Checkout
        uses: actions/checkout@v4

      - name: ‚ö° Activate persistent virtual environment
        uses: ./.github/actions/setup-venv
        with:
          requirements-hash: >-
            ${{ needs.persistent-setup.outputs.requirements-hash }}

      - name: üîí Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt >> $GITHUB_STEP_SUMMARY || true

      - name: üõ°Ô∏è Run Safety vulnerability check
        run: |
          if command -v safety >/dev/null 2>&1; then
            echo "## Safety Vulnerability Report" >> $GITHUB_STEP_SUMMARY
            safety check --full-report --json > safety-report.json \
              || true
            cat safety-report.json >> $GITHUB_STEP_SUMMARY || true
          fi

      - name: üìä Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_id }}
          path: "*-report.json"
          retention-days: 30

      - name: üìã Debug on failure
        if: failure()
        shell: bash
        run: |
          set -euo pipefail
          python scripts/debug_ci.py > debug.log
      - name: üì§ Upload debug logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-security-${{ github.run_id }}
          path: debug.log
          retention-days: 7

  group-matrix:
    name: "üóÇÔ∏è Prepare Test Matrix"
    runs-on: [self-hosted, linux]
    needs: bypass-check
    if: needs.bypass-check.outputs.bypass != 'true'
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - name: ‚ö° Checkout
        uses: actions/checkout@v4
      - id: set
        run: |
          MATRIX=$(jq -c '{include: [.[] | {"test-group": .name, path: .path, coverage: .coverage}]}' tests/groups.json)
          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"

  persistent-tests:
    name: üöÄ Tests (${{ matrix.test-group }})
    runs-on: [self-hosted, ice-t, linux, test, smoke]
    needs: [bypass-check, persistent-setup, group-matrix]
    if: needs.bypass-check.outputs.bypass != 'true'
    timeout-minutes: 6
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix: ${{ fromJson(needs.group-matrix.outputs.matrix) }}

    steps:
      - name: ‚ö° Checkout
        uses: actions/checkout@v4

      - name: ‚ö° Activate persistent virtual environment
        uses: ./.github/actions/setup-venv
        with:
          requirements-hash: >-
            ${{ needs.persistent-setup.outputs.requirements-hash }}

      - name: üîß Self-healing test setup
        run: |
          # Use adaptive test runner to heal any missing test structure
          python scripts/adaptive_test_runner.py heal

      - name: ‚ö° Run ${{ matrix.test-group }} tests
        run: |
          if [ -d "${{ matrix.path }}" ]; then
            # Use adaptive test runner for ice-t specific testing
            if [ "${{ matrix.test-group }}" = "smoke" ]; then
              python scripts/adaptive_test_runner.py run --smoke
            elif [ "${{ matrix.test-group }}" = "integration" ]; then
              python scripts/adaptive_test_runner.py run --level integration
            else
              # For unit tests, use pytest directly with coverage
              PYTEST_CMD="pytest ${{ matrix.path }}"

              if [ "${{ matrix.coverage }}" = "true" ]; then
                COVERAGE_FILE="coverage-${{ matrix.test-group }}.xml"
                PYTEST_CMD="$PYTEST_CMD --cov=ice_t"
                PYTEST_CMD="$PYTEST_CMD --cov-report=xml:$COVERAGE_FILE"
                PYTEST_CMD="$PYTEST_CMD --cov-fail-under=94"
              fi

              # Use local pytest cache (.pytest_cache) automatically
              PYTEST_CMD="$PYTEST_CMD -n auto --dist=worksteal"
              PYTEST_CMD="$PYTEST_CMD --tb=short --maxfail=5"

              echo "Running: $PYTEST_CMD"
              eval $PYTEST_CMD
            fi
          else
            echo "Test dir ${{ matrix.path }} not found, healing with adaptive runner"
            python scripts/adaptive_test_runner.py heal
          fi

      - name: üìä Upload coverage
        if: always() && matrix.coverage == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-group }}-${{ github.run_id }}
          path: |
            coverage-${{ matrix.test-group }}.xml
            .coverage*
          retention-days: 7

      - name: üìã Debug on failure
        if: failure()
        shell: bash
        run: |
          set -euo pipefail
          python scripts/debug_ci.py > debug.log
      - name: üì§ Upload debug logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ matrix.test-group }}-${{ github.run_id }}
          path: debug.log
          retention-days: 7

  persistent-build:
    name: üöÄ Build (Local Cache)
    runs-on: [self-hosted, build, linux]
    needs:
      - bypass-check
      - persistent-setup
      - persistent-code-quality
    if: needs.bypass-check.outputs.bypass != 'true'
    timeout-minutes: 6
    steps:
      - name: ‚ö° Checkout
        uses: actions/checkout@v4

      - name: ‚ö° Activate persistent virtual environment
        uses: ./.github/actions/setup-venv
        with:
          requirements-hash: >-
            ${{ needs.persistent-setup.outputs.requirements-hash }}

      - name: üîß Install build tools (cached in venv)
        run: |
          if [ ! -f "pyproject.toml" ] && [ ! -f "setup.py" ]; then
            echo "‚ö†Ô∏è No build config found (pyproject.toml or setup.py), skipping build"
            exit 0
          fi

          # Install build tools if not already present
          if ! command -v build >/dev/null 2>&1; then
            pip install --no-input --no-compile build wheel
          fi

      - name: üèóÔ∏è Build package
        run: |
          if [ -f "pyproject.toml" ] || [ -f "setup.py" ]; then
            echo "üèóÔ∏è Building package..."
            python -m build
            echo "‚úÖ Package built successfully"

            # Show build artifacts
            if [ -d "dist" ]; then
              echo "## Build Artifacts" >> $GITHUB_STEP_SUMMARY
              ls -la dist/ >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "üìù No package configuration found, build skipped"
            echo "## Build Status" >> $GITHUB_STEP_SUMMARY
            echo "No package config (pyproject/setup.py)" \
              >> $GITHUB_STEP_SUMMARY
          fi

      - name: üì¶ Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: dist/
          retention-days: 7

      - name: üìã Debug on failure
        if: failure()
        shell: bash
        run: |
          set -euo pipefail
          python scripts/debug_ci.py > debug.log
      - name: üì§ Upload debug logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-build-${{ github.run_id }}
          path: debug.log
          retention-days: 7

  persistent-summary:
    name: üéØ CI Summary
    runs-on: [self-hosted, build]
    needs:
      - bypass-check
      - persistent-setup
      - persistent-code-quality
      - persistent-type-checking
      - persistent-security
      - persistent-tests
      - persistent-build
    if: always()
    timeout-minutes: 1
    steps:
      - name: "üì• Download coverage"
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*-${{ github.run_id }}
          path: coverage

      - name: "üßÆ Combine coverage"
        shell: bash
        run: |
          set -euo pipefail
          python -m coverage combine coverage/**/.coverage*
          python -m coverage xml -o coverage.xml
          python -m coverage report \
            --fail-under=94 \
            >> "$GITHUB_STEP_SUMMARY"

      - name: "üì§ Upload combined coverage"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage-${{ github.run_id }}
          path: coverage.xml
          retention-days: 7
      - name: üìä Generate summary
        run: |
          echo "## üöÄ Turbo CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Perf Mode:** ${{ needs.persistent-setup.outputs.performance-mode }}" \
            >> $GITHUB_STEP_SUMMARY
          echo "**Py Ver:** ${{ needs.persistent-setup.outputs.python-version }}" \
            >> $GITHUB_STEP_SUMMARY
          echo "**Req Hash:** ${{ needs.persistent-setup.outputs.requirements-hash }}" \
            >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | ${{ needs.persistent-setup.result == 'success' && '‚úÖ' || '‚ùå' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "| Quality | ${{ needs.persistent-code-quality.result == 'success' && '‚úÖ' || '‚ùå' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "| Types | ${{ needs.persistent-type-checking.result == 'success' && '‚úÖ' || '‚ùå' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.persistent-security.result == 'success' && '‚úÖ' || '‚ùå' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.persistent-tests.result == 'success' && '‚úÖ' || '‚ùå' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.persistent-build.result == 'success' && '‚úÖ' || '‚ùå' }} |" \
            >> $GITHUB_STEP_SUMMARY

          # Set overall status
          if [ "${{ needs.persistent-setup.result }}" = "success" ] && \
             [ "${{ needs.persistent-code-quality.result }}" = "success" ] && \
             [ "${{ needs.persistent-type-checking.result }}" = "success" ] && \
             [ "${{ needs.persistent-security.result }}" = "success" ] && \
             [ "${{ needs.persistent-tests.result }}" = "success" ] && \
             [ "${{ needs.persistent-build.result }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéâ **All jobs OK!**" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå **Some jobs FAILED. Check logs.**" \
              >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
